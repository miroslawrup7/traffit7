{"version":3,"sources":["main.js"],"names":["jobLoc","document","querySelector","jobLabelLoc","jobInputLoc","jobClearBtnLoc","cityLoc","cityListBtnLoc","cityListTitleLoc","citySelectedOptionsLoc","cityListLoc","distanceLoc","distanceListBtnLoc","distanceListTitleLoc","distanceListLoc","sectorLoc","sectorListBtnLoc","sectorListTitleLoc","sectorSelectedOptionsLoc","sectorListLoc","employmentFormLoc","employmentFormListBtnLoc","employmentFormListTitleLoc","employmentFormSelectedOptionsLoc","employmentFormListLoc","workingHoursLoc","workingHoursListBtnLoc","workingHoursListTitleLoc","workingHoursSelectedOptionsLoc","workingHoursListLoc","languageLoc","languageListBtnLoc","languageListTitleLoc","languageSelectedOptionsLoc","languageListLoc","awardedResultsLoc","recordsOnPageLoc","pagesSwitchLoc","pagesContainer","pageButtonsLoc","querySelectorAll","brancheWrapperLoc","branchesLoc","jobFormLoc","jobTypeLoc","langLoc","citiesLoc","resultsLoc","remoteLoc","remoteInputLoc","relocationLoc","relocationInputLoc","searchInputLoc","distanceInputsLoc","distanceTitleLoc","searchBtn","advancedSearchBar","advancedSearchBtn","advancedContainer","addEventListener","e","classList","add","style","opacity","display","event","target","value","remove","stopPropagation","click","removePaddingBottomToFilterList","filterList","closest","paddingBottom","boxShadow","addPaddingBottomToFilterList","dropDownListArray","forEach","elem","toggle","filteredRecordsArray_11","apiNumber","filterConfigData","apiPage","rawAPIArray","allRecordsArray","recordsNumber","firstRecordNumber","recordsOnPage","filtersON","filterBranchesList","filterJobFormList","filterJobTypeList","filterLangList","filterCountriesList","innerText","Number","dataset","distance","filterListLocArray","selectedOptionsInFilterArray","setClearBtn","index","clearBtn","filtersQuantityBtn","filtersSelectedOptions","filtersListTitle","length","el","checked","actionAfterFilterInputChange","filterParentLoc","filtersListTitleLoc","filtersSelectedOptionsLoc","indexFilter","indexOf","push","indexDeletedItem","splice","join","addListenerToFilterListsElements","createRecordBoxes","recordsArray","replaceChildren","i","borderColorClass","textColorClass","Object","keys","recruitmentType_colorOnly","recruitmentType","formaZatrudnienia","jobForm","insertAdjacentHTML","url","lang","branche","name","city","jobType","visibleRate","salaryFrom","salaryTo","remote","relocation","createFilteredRecordsArray","branchesChildrenLoc","jobFormChildrenLoc","jobTypeChildrenLoc","langChildrenLoc","citiesChildrenLoc","filteredRecordsArray","selectedBranches","branche_filter","Array","from","filter","map","filteredRecordsArray_1","addFlag","selectedFiltr","selectedJobForms","filteredRecordsArray_2","selectedjobTypes","filteredRecordsArray_3","selectedLangs","language_filter","filteredRecordsArray_4","selectedCountry","filteredRecordsArray_5","location_country_filter","country","filteredRecordsArray_6","selectedCity","location_city_filter","filteredRecordsArray_7","location_distance","lati","longi","min_lati","max_lati","min_longi","max_longi","selectedDistance","parseInt","el_city","el_record","Math","cos","PI","filteredRecordsArray_8","remote_filter","filteredRecordsArray_9","filteredRecordsArray_10","searchText","position","description","field_id","toLowerCase","search","selectedRecruitmentType","recruitmentType_filter","setPages","pagesContainerStart","dropDownBtnStart","dropDownLoc","showHideFilters","createFilterLists","relocation_visible","language_visible","remote_visible","location_visible","branche_visible","sort","a","b","localeCompare","compare","key","reduce","accumulator","allCitiesObj","concat","allCitiesArray","changePage","pageBtn","firstRecord","lastRecord","globActivePageNo","movePrevPagesBtns","activePageNo","firstDispalyedPageNo","shift","lastDispalyedPageNo","pop","n","pagesQuantityCalc","moveNextPagesBtns","getWidth","max","body","scrollWidth","documentElement","offsetWidth","clientWidth","getHeight","scrollHeight","offsetHeight","clientHeight","ceil","maxPageBtns","setPagesBtnQuantity","window","filterAwarded","configFilterArray","awardedRecordsArray","property","findFlag","element","createAwardedRecordBoxes","awarded","margin","summariseDownload","recNumLoc","noResultsLoc","createDataForFilters","undefined","findIndex","arr_el","reworkData","parsedJobLocation","options","job_location","JSON","parse","advert","branches","language","job_type","_Widoczna_stawka","_spodziewane_wynagrodzenie_od","_spodziewane_wynagrodzenie_do","_relokacja","_rekrutacja_rodzaj","_forma_zatrudnienia","locality","parseFloat","latitude","longitude","values","getAPI","fetch","mode","headers","getAPI_2","loopOnAPI","jsonData","createRecordsObjFromAPI","createRecordsObjFromAPI_2","async","rawData","json","getConfigFilter","readConfigFilter","console","error","clearAllFiltersLoc","preventDefault"],"mappings":"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","file":"all.min.js","sourcesContent":["\"use strict\";\r\n\r\nconst jobLoc = document.querySelector(\".job\");\r\nconst jobLabelLoc = document.querySelector(\".job label\");\r\nconst jobInputLoc = document.querySelector(\".job input\");\r\nconst jobClearBtnLoc = jobLoc.querySelector(\".clear-btn\");\r\n\r\nconst cityLoc = document.querySelector(\".city\");\r\nconst cityListBtnLoc = document.querySelector(\".city .arrow-down\");\r\nconst cityListTitleLoc = document.querySelector(\".city .list-title\");\r\nconst citySelectedOptionsLoc = document.querySelector(\".city .selected-options\");\r\nconst cityListLoc = document.querySelector(\".city .list\");\r\n\r\nconst distanceLoc = document.querySelector(\".distance\");\r\nconst distanceListBtnLoc = document.querySelector(\".distance .arrow-down\");\r\nconst distanceListTitleLoc = document.querySelector(\".distance .list-title\");\r\nconst distanceListLoc = document.querySelector(\".distance .list\");\r\n\r\nconst sectorLoc = document.querySelector(\".sector\");\r\nconst sectorListBtnLoc = document.querySelector(\".sector .arrow-down\");\r\nconst sectorListTitleLoc = document.querySelector(\".sector .list-title\");\r\nconst sectorSelectedOptionsLoc = document.querySelector(\".sector .selected-options\");\r\nconst sectorListLoc = document.querySelector(\".sector .list\");\r\n\r\nconst employmentFormLoc = document.querySelector(\".employment-form\");\r\nconst employmentFormListBtnLoc = document.querySelector(\".employment-form .arrow-down\");\r\nconst employmentFormListTitleLoc = document.querySelector(\".employment-form .list-title\");\r\nconst employmentFormSelectedOptionsLoc = document.querySelector(\".employment-form .selected-options\");\r\nconst employmentFormListLoc = document.querySelector(\".employment-form .list\");\r\n\r\nconst workingHoursLoc = document.querySelector(\".working-hours\");\r\nconst workingHoursListBtnLoc = document.querySelector(\".working-hours .arrow-down\");\r\nconst workingHoursListTitleLoc = document.querySelector(\".working-hours .list-title\");\r\nconst workingHoursSelectedOptionsLoc = document.querySelector(\".working-hours .selected-options\");\r\nconst workingHoursListLoc = document.querySelector(\".working-hours .list\");\r\n\r\nconst languageLoc = document.querySelector(\".language\");\r\nconst languageListBtnLoc = document.querySelector(\".language .arrow-down\");\r\nconst languageListTitleLoc = document.querySelector(\".language .list-title\");\r\nconst languageSelectedOptionsLoc = document.querySelector(\".language .selected-options\");\r\nconst languageListLoc = document.querySelector(\".language .list\");\r\n\r\nconst awardedResultsLoc = document.querySelector(\".awarded\");\r\nconst recordsOnPageLoc = document.querySelector(\".records-on-page\");\r\nconst pagesSwitchLoc = document.querySelector(\".pages\");\r\nconst pagesContainer = document.querySelector(\".pages-container\");\r\nlet pageButtonsLoc = document.querySelectorAll(\".page\");\r\n\r\nconst brancheWrapperLoc = document.querySelector(\".sector\");\r\nconst branchesLoc = document.querySelector(\".sector ul\");\r\nconst jobFormLoc = document.querySelector(\".employment-form ul\");\r\nconst jobTypeLoc = document.querySelector(\".working-hours ul\");\r\nconst langLoc = document.querySelector(\".language ul\");\r\nconst citiesLoc = document.querySelector(\".city ul\");\r\nconst resultsLoc = document.querySelector(\".results\");\r\n\r\nconst remoteLoc = document.querySelector(\".remote\");\r\nconst remoteInputLoc = document.querySelector(\"#remote\");\r\nconst relocationLoc = document.querySelector(\".relocation\");\r\nconst relocationInputLoc = document.querySelector(\"#relocation\");\r\nconst searchInputLoc = document.querySelector(\".job input\");\r\n\r\nconst distanceInputsLoc = document.querySelectorAll(\".distance input\");\r\nconst distanceTitleLoc = document.querySelector(\".distance .list-title\");\r\n\r\nconst searchBtn = document.querySelector(\".search-btn\");\r\n\r\nconst advancedSearchBar = document.querySelector(\".wrapper.five\");\r\nconst advancedSearchBtn = document.querySelector(\".advanced-search-btn .arrow-down\");\r\nconst advancedContainer = document.querySelector(\".advanced-container\");\r\n\r\njobLoc.addEventListener(\"click\", (e) => {\r\n    jobLabelLoc.classList.add(\"mini\");\r\n    jobInputLoc.classList.add(\"active\");\r\n    jobClearBtnLoc.style.opacity = \"0.5\";\r\n    jobClearBtnLoc.style.display = \"flex\";\r\n});\r\n\r\njobInputLoc.addEventListener(\"blur\", (event) => {\r\n    if (!event.target.value) {\r\n        jobLabelLoc.classList.remove(\"mini\");\r\n        jobInputLoc.classList.remove(\"active\");\r\n        jobClearBtnLoc.style.opacity = \"0\";\r\n        jobClearBtnLoc.style.display = \"none\";\r\n    }\r\n});\r\n\r\njobClearBtnLoc.addEventListener(\"click\", (e) => {\r\n    e.stopPropagation();\r\n    jobInputLoc.value = \"\";\r\n    jobLabelLoc.classList.remove(\"mini\");\r\n    jobInputLoc.classList.remove(\"active\");\r\n    jobClearBtnLoc.style.opacity = \"0\";\r\n    jobClearBtnLoc.style.display = \"none\";\r\n    searchBtn.click();\r\n});\r\n\r\nconst removePaddingBottomToFilterList = (filterList) => {\r\n    filterList.closest(\".element\").style.paddingBottom = \"\";\r\n    filterList.closest(\".element\").style.boxShadow = \"\";\r\n};\r\n\r\nconst addPaddingBottomToFilterList = (filterList) => {\r\n    if (filterList.closest(\".element\").style.paddingBottom === \"\") {\r\n        filterList.closest(\".element\").style.paddingBottom = \"15px\";\r\n        filterList.closest(\".element\").style.boxShadow = \"0px 0px 3px rgba(0,0,0,0.1)\";\r\n    } else {\r\n        removePaddingBottomToFilterList(filterList);\r\n    }\r\n};\r\n\r\nconst dropDownListArray = [cityLoc, distanceLoc, sectorLoc, employmentFormLoc, workingHoursLoc, languageLoc];\r\n\r\ndropDownListArray.forEach((elem) => {\r\n    elem.querySelector(\".list-title\").addEventListener(\"click\", () => {\r\n        elem.querySelector(\".list\").classList.toggle(\"expand\");\r\n        elem.querySelector(\".arrow-down\").classList.toggle(\"rotate180\");\r\n        addPaddingBottomToFilterList(elem.querySelector(\".list-title\"));\r\n    });\r\n});\r\n\r\ndropDownListArray.forEach((elem) => {\r\n    elem.addEventListener(\"mouseleave\", () => {\r\n        elem.querySelector(\".list\").classList.remove(\"expand\");\r\n        elem.querySelector(\".arrow-down\").classList.remove(\"rotate180\");\r\n        removePaddingBottomToFilterList(elem.querySelector(\".list-title\"));\r\n    });\r\n});\r\n\r\nlet filterConfigData = {};\r\nlet apiPage = 1;\r\nlet rawAPIArray = [];\r\nlet allRecordsArray = [];\r\nlet recordsNumber = 0;\r\nlet firstRecordNumber = 0;\r\nlet recordsOnPage = 20;\r\nlet filtersON = false;\r\nlet filterBranchesList = [];\r\nlet filterJobFormList = [];\r\nlet filterJobTypeList = [];\r\nlet filterLangList = [];\r\nlet filterCountriesList = {};\r\nlet filteredRecordsArray_11;\r\nlet apiNumber;\r\n\r\n// change distance label after choose\r\ndistanceInputsLoc.forEach((elem) => {\r\n    elem.addEventListener(\"change\", () => {\r\n        distanceTitleLoc.innerText = `+${Number(elem.value)} km`;\r\n        distanceTitleLoc.dataset.distance = Number(elem.value);\r\n        searchBtn.click();\r\n    });\r\n});\r\n\r\nrecordsOnPageLoc.value = recordsOnPage;\r\n\r\nconst filterListLocArray = [cityLoc, sectorLoc, employmentFormLoc, workingHoursLoc, languageLoc];\r\nlet selectedOptionsInFilterArray = [[], [], [], [], [], []];\r\n\r\nconst setClearBtn = () => {\r\n    filterListLocArray.forEach((elem, index) => {\r\n        // selectedOptionsInFilterArray.push([]);\r\n\r\n        const clearBtn = elem.querySelector(\".clear-btn\");\r\n        const filtersQuantityBtn = elem.querySelector(\".filters-quantity\");\r\n        const filtersSelectedOptions = elem.querySelector(\".selected-options\");\r\n        const filtersListTitle = elem.querySelector(\".list-title\");\r\n\r\n        clearBtn.addEventListener(\"mouseenter\", () => {\r\n            if (selectedOptionsInFilterArray[index].length !== 0) {\r\n                filtersQuantityBtn.style.opacity = \"0\";\r\n                clearBtn.style.opacity = \"1\";\r\n            }\r\n        });\r\n\r\n        clearBtn.addEventListener(\"mouseleave\", () => {\r\n            if (selectedOptionsInFilterArray[index].length !== 0) {\r\n                filtersQuantityBtn.style.opacity = \"1\";\r\n                clearBtn.style.opacity = \"0\";\r\n            }\r\n        });\r\n\r\n        clearBtn.addEventListener(\"click\", () => {\r\n            if (selectedOptionsInFilterArray[index].length !== 0) {\r\n                selectedOptionsInFilterArray[index] = [];\r\n                clearBtn.style.opacity = \"0\";\r\n                elem.querySelectorAll(\"input\").forEach((el) => {\r\n                    el.checked = false;\r\n                });\r\n                filtersSelectedOptions.innerText = \"\";\r\n                filtersListTitle.classList.remove(\"mini\");\r\n                filtersQuantityBtn.style.opacity = \"0\";\r\n                searchBtn.click();\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\nsetClearBtn();\r\n\r\nconst actionAfterFilterInputChange = (e) => {\r\n    const filterParentLoc = e.target.closest(\".drop-down-container\");\r\n    const filtersQuantityBtn = filterParentLoc.querySelector(\".filters-quantity\");\r\n    const filtersListTitleLoc = filterParentLoc.querySelector(\".list-title\");\r\n    const filtersSelectedOptionsLoc = filterParentLoc.querySelector(\".selected-options\");\r\n\r\n    const indexFilter = filterListLocArray.indexOf(filterParentLoc);\r\n\r\n    if (e.target.checked) {\r\n        selectedOptionsInFilterArray[indexFilter].push(e.target.value);\r\n    } else {\r\n        const indexDeletedItem = selectedOptionsInFilterArray[indexFilter].indexOf(e.target.value);\r\n        selectedOptionsInFilterArray[indexFilter].splice(indexDeletedItem, 1);\r\n    }\r\n\r\n    selectedOptionsInFilterArray[indexFilter];\r\n\r\n    if (selectedOptionsInFilterArray[indexFilter].length !== 0) {\r\n        filtersListTitleLoc.classList.add(\"mini\");\r\n        filtersQuantityBtn.style.opacity = \"1\";\r\n        filtersQuantityBtn.innerText = selectedOptionsInFilterArray[indexFilter].length;\r\n    } else {\r\n        filtersListTitleLoc.classList.remove(\"mini\");\r\n        filtersQuantityBtn.style.opacity = \"0\";\r\n    }\r\n\r\n    filtersSelectedOptionsLoc.innerText = selectedOptionsInFilterArray[indexFilter].join(\", \");\r\n    searchBtn.click();\r\n};\r\n\r\nconst addListenerToFilterListsElements = () => {\r\n    document.querySelectorAll(\".city ul input\").forEach((elem) => {\r\n        elem.addEventListener(\"change\", actionAfterFilterInputChange);\r\n    });\r\n\r\n    document.querySelectorAll(\".sector ul input\").forEach((elem) => {\r\n        elem.addEventListener(\"change\", actionAfterFilterInputChange);\r\n    });\r\n\r\n    document.querySelectorAll(\".employment-form ul input\").forEach((elem) => {\r\n        elem.addEventListener(\"change\", actionAfterFilterInputChange);\r\n    });\r\n\r\n    document.querySelectorAll(\".working-hours ul input\").forEach((elem) => {\r\n        elem.addEventListener(\"change\", actionAfterFilterInputChange);\r\n    });\r\n\r\n    document.querySelectorAll(\".language ul input\").forEach((elem) => {\r\n        elem.addEventListener(\"change\", actionAfterFilterInputChange);\r\n    });\r\n};\r\n\r\n// create RECORDS BOXES ///////////////////////////////////////////////\r\nconst createRecordBoxes = (recordsArray, firstRecordNumber, recordsOnPage) => {\r\n    resultsLoc.replaceChildren();\r\n\r\n    for (let i = firstRecordNumber; i < recordsOnPage; i++) {\r\n        // colouring of records by type of recruitment\r\n\r\n        if (recordsArray[i]) {\r\n            let borderColorClass = \"\";\r\n            let textColorClass = \"\";\r\n\r\n            if (Object.keys(filterConfigData).length !== 0) {\r\n                if (!filterConfigData.recruitmentType_colorOnly.length) {\r\n                    if (recordsArray[i].recruitmentType === \"PT\") {\r\n                        borderColorClass = \"pt-border\";\r\n                        textColorClass = \"pt-text\";\r\n                    }\r\n                    if (recordsArray[i].recruitmentType === \"RS\") {\r\n                        borderColorClass = \"rs-border\";\r\n                        textColorClass = \"rs-text\";\r\n                    }\r\n                    if (recordsArray[i].recruitmentType === \"WEW\") {\r\n                        borderColorClass = \"wew-border\";\r\n                        textColorClass = \"wew-text\";\r\n                    }\r\n                } else {\r\n                    if (filterConfigData.recruitmentType_colorOnly.indexOf(\"PT\") !== -1) {\r\n                        if (recordsArray[i].recruitmentType === \"PT\") {\r\n                            borderColorClass = \"pt-border\";\r\n                            textColorClass = \"pt-text\";\r\n                        }\r\n                    }\r\n\r\n                    if (filterConfigData.recruitmentType_colorOnly.indexOf(\"RS\") !== -1) {\r\n                        if (recordsArray[i].recruitmentType === \"RS\") {\r\n                            borderColorClass = \"rs-border\";\r\n                            textColorClass = \"rs-text\";\r\n                        }\r\n                    }\r\n\r\n                    if (filterConfigData.recruitmentType_colorOnly.indexOf(\"WEW\") !== -1) {\r\n                        if (recordsArray[i].recruitmentType === \"WEW\") {\r\n                            borderColorClass = \"wew-border\";\r\n                            textColorClass = \"wew-text\";\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            let formaZatrudnienia = \"\";\r\n\r\n            if (recordsArray[i].jobForm) {\r\n                recordsArray[i].jobForm.forEach(function (elem) {\r\n                    formaZatrudnienia = formaZatrudnienia + \"<p>\" + elem + \"</p>\";\r\n                });\r\n            }\r\n\r\n            resultsLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<a href=\"${recordsArray[i].url}\" target=\"_blank\"><div class=\"result ${borderColorClass}\">\r\n            <div class=\"top\">\r\n              \r\n                    <div class=\"lang\"><p>${recordsArray[i].lang}</p></div>\r\n                    <div class=\"branche-name\">\r\n                        <div class=\"branche\">${recordsArray[i].branche ? recordsArray[i].branche : \"\"}</div>\r\n                        <div class=\"name ${textColorClass}\">${recordsArray[i].name}</div>\r\n                   \r\n                </div>\r\n              \r\n            </div>\r\n\r\n            <div class=\"bottom\">\r\n                <div class=\"city-container\">\r\n                    <div class=\"city\"><img src=\"./img/location_dot.svg\">${recordsArray[i].city}</div>\r\n                    </div>\r\n                    <div class=\"details-container\">\r\n                    ${recordsArray[i].jobType ? \"<div class='jobtype'>\" + recordsArray[i].jobType + \"</div>\" : \"\"}\r\n                    ${recordsArray[i].visibleRate ? (recordsArray[i].salaryFrom && recordsArray[i].salaryTo ? \"<div class='salary'>\" + recordsArray[i].salaryFrom + \" - \" + recordsArray[i].salaryTo + \"</div>\" : \"\") : \"\"}\r\n                    ${recordsArray[i].remote ? \"<div class='remote'>zdalna</div>\" : \"\"}\r\n                    ${recordsArray[i].relocation ? \"<div class='relocation'>relocation</div>\" : \"\"}\r\n                    <div class=\"employmentform\">${formaZatrudnienia}</div>\r\n                    </div>\r\n                </div>\r\n                   \r\n                </div>\r\n          \r\n\r\n        </div></a>`\r\n            );\r\n        }\r\n    }\r\n};\r\n\r\n// filter the data to create FILTERED OBJECTS ARRAY ///////////////////////////////\r\nconst createFilteredRecordsArray = () => {\r\n    const branchesChildrenLoc = branchesLoc.querySelectorAll(\"li input\");\r\n    const jobFormChildrenLoc = jobFormLoc.querySelectorAll(\"li input\");\r\n    const jobTypeChildrenLoc = jobTypeLoc.querySelectorAll(\"li input\");\r\n    const langChildrenLoc = langLoc.querySelectorAll(\"li input\");\r\n    const citiesChildrenLoc = citiesLoc.querySelectorAll(\"li input\");\r\n\r\n    let filteredRecordsArray = allRecordsArray;\r\n\r\n    // selectedBranches ////////////////\r\n    let selectedBranches = [];\r\n\r\n    if (Object.keys(filterConfigData).length !== 0 && filterConfigData.branche_filter.length) {\r\n        selectedBranches = filterConfigData.branche_filter;\r\n    } else {\r\n        selectedBranches = Array.from(branchesChildrenLoc)\r\n            .filter(function (elem) {\r\n                return elem.checked;\r\n            })\r\n            .map(function (elem) {\r\n                return elem.value;\r\n            });\r\n    }\r\n\r\n    let filteredRecordsArray_1 = [];\r\n\r\n    if (selectedBranches.length !== 0) {\r\n        filteredRecordsArray.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            selectedBranches.forEach((selectedFiltr) => {\r\n                if (el.branche === selectedFiltr) {\r\n                    addFlag = true;\r\n                }\r\n            });\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_1.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_1 = filteredRecordsArray;\r\n    }\r\n\r\n    // selectedJobForms ////////////////\r\n    let selectedJobForms = [];\r\n\r\n    selectedJobForms = Array.from(jobFormChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.checked;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n\r\n    let filteredRecordsArray_2 = [];\r\n\r\n    if (selectedJobForms.length !== 0) {\r\n        filteredRecordsArray_1.forEach((el, index) => {\r\n            if (el.jobForm) {\r\n                let addFlag = false;\r\n\r\n                selectedJobForms.forEach((selectedFiltr) => {\r\n                    if (el.jobForm.indexOf(selectedFiltr) !== -1) {\r\n                        addFlag = true;\r\n                    }\r\n                });\r\n\r\n                if (addFlag) {\r\n                    filteredRecordsArray_2.push(el);\r\n                }\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_2 = filteredRecordsArray_1;\r\n    }\r\n\r\n    // selectedJobTypes ////////////////\r\n    let selectedjobTypes = Array.from(jobTypeChildrenLoc)\r\n        .filter(function (elem) {\r\n            return elem.checked;\r\n        })\r\n        .map(function (elem) {\r\n            return elem.value;\r\n        });\r\n\r\n    let filteredRecordsArray_3 = [];\r\n\r\n    if (selectedjobTypes.length !== 0) {\r\n        filteredRecordsArray_2.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            selectedjobTypes.forEach((selectedFiltr) => {\r\n                if (el.jobType === selectedFiltr) {\r\n                    addFlag = true;\r\n                }\r\n            });\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_3.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_3 = filteredRecordsArray_2;\r\n    }\r\n\r\n    // selectedLangs ////////////////\r\n    let selectedLangs = [];\r\n\r\n    if (Object.keys(filterConfigData).length !== 0 && filterConfigData.language_filter.length) {\r\n        selectedLangs = filterConfigData.language_filter;\r\n    } else {\r\n        selectedLangs = Array.from(langChildrenLoc)\r\n            .filter(function (elem) {\r\n                return elem.checked;\r\n            })\r\n            .map(function (elem) {\r\n                return elem.value;\r\n            });\r\n    }\r\n\r\n    let filteredRecordsArray_4 = [];\r\n\r\n    if (selectedLangs.length !== 0) {\r\n        filteredRecordsArray_3.forEach((el, index) => {\r\n            let addFlag = false;\r\n\r\n            selectedLangs.forEach((selectedFiltr) => {\r\n                if (el.lang === selectedFiltr) {\r\n                    addFlag = true;\r\n                }\r\n            });\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_4.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_4 = filteredRecordsArray_3;\r\n    }\r\n\r\n    // selectedCountry ////////////////\r\n\r\n    let selectedCountry = [];\r\n    let filteredRecordsArray_5 = [];\r\n\r\n    if (Object.keys(filterConfigData).length !== 0 && filterConfigData.location_country_filter.length) {\r\n        selectedCountry = filterConfigData.location_country_filter;\r\n        filteredRecordsArray_4.forEach((el) => {\r\n            let addFlag = false;\r\n\r\n            selectedCountry.forEach((selectedFiltr) => {\r\n                if (el.country === selectedFiltr) {\r\n                    addFlag = true;\r\n                }\r\n            });\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_5.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_5 = filteredRecordsArray_4;\r\n    }\r\n\r\n    let filteredRecordsArray_6 = filteredRecordsArray_5;\r\n\r\n    // selectedCity & selectedDistance ////////////////\r\n\r\n    let selectedCity = [];\r\n\r\n    if (Object.keys(filterConfigData).length !== 0 && filterConfigData.location_city_filter.length) {\r\n        selectedCity = filterConfigData.location_city_filter;\r\n        cityLoc.style.display = \"none\";\r\n    } else {\r\n        selectedCity = Array.from(citiesChildrenLoc)\r\n            .filter(function (elem) {\r\n                if (elem.value) {\r\n                    return elem.checked;\r\n                }\r\n            })\r\n            .map(function (elem) {\r\n                if (elem.value) {\r\n                    return elem.value;\r\n                }\r\n            });\r\n    }\r\n\r\n    let filteredRecordsArray_7 = [];\r\n\r\n    if (Object.keys(filterConfigData).length !== 0 && filterConfigData.location_distance !== null) {\r\n        distanceLoc.style.display = \"none\";\r\n    }\r\n\r\n    if (selectedCity.length) {\r\n        let selectedDistance = parseInt(distanceTitleLoc.dataset.distance);\r\n\r\n        let lati;\r\n        let longi;\r\n        let min_lati;\r\n        let max_lati;\r\n        let min_longi;\r\n        let max_longi;\r\n\r\n        selectedCity.forEach((el_city) => {\r\n            filteredRecordsArray_6.forEach((el_record) => {\r\n                if (el_city === el_record.city) {\r\n                    lati = el_record.lati;\r\n                    longi = el_record.longi;\r\n                    if (Object.keys(filterConfigData).length !== 0 && filterConfigData.location_distance !== null) {\r\n                        selectedDistance = filterConfigData.location_distance;\r\n                        distanceLoc.style.display = \"none\";\r\n                    }\r\n                    min_lati = lati - selectedDistance * 0.009044;\r\n                    max_lati = lati + selectedDistance * 0.009044;\r\n                    min_longi = longi - (selectedDistance * 0.0089831) / Math.cos((lati * Math.PI) / 180);\r\n                    max_longi = longi + (selectedDistance * 0.0089831) / Math.cos((lati * Math.PI) / 180);\r\n                }\r\n            });\r\n\r\n            filteredRecordsArray_6.forEach((el_record) => {\r\n                if (el_record.lati <= max_lati && el_record.lati >= min_lati && el_record.longi <= max_longi && el_record.longi >= min_longi) {\r\n                    filteredRecordsArray_7.push(el_record);\r\n                }\r\n            });\r\n        });\r\n    } else {\r\n        filteredRecordsArray_7 = filteredRecordsArray_6;\r\n    }\r\n\r\n    // selectedRemote ////////////////\r\n\r\n    let filteredRecordsArray_8 = [];\r\n\r\n    if (remoteInputLoc.checked || filterConfigData.remote_filter) {\r\n        filteredRecordsArray_7.forEach((el) => {\r\n            let addFlag = false;\r\n\r\n            if (el.remote) {\r\n                addFlag = true;\r\n            }\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_8.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_8 = filteredRecordsArray_7;\r\n    }\r\n\r\n    // selectedRelocation ////////////////\r\n    let filteredRecordsArray_9 = [];\r\n\r\n    if (relocationInputLoc.checked) {\r\n        filteredRecordsArray_8.forEach((el) => {\r\n            let addFlag = false;\r\n\r\n            if (el.relocation) {\r\n                addFlag = true;\r\n            }\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_9.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_9 = filteredRecordsArray_8;\r\n    }\r\n\r\n    // searchText ////////////////\r\n\r\n    let filteredRecordsArray_10 = [];\r\n\r\n    let searchText = searchInputLoc.value;\r\n\r\n    if (searchText) {\r\n        filteredRecordsArray_9.forEach((el) => {\r\n            let addFlag = false;\r\n\r\n            let position;\r\n\r\n            el.description.forEach(function (elem) {\r\n                if (elem.value && elem.field_id !== \"geolocation\") {\r\n                    position = elem.value.toLowerCase().search(searchText.toLowerCase());\r\n                    if (position !== -1) {\r\n                        addFlag = true;\r\n                    }\r\n                }\r\n            });\r\n\r\n            position = el.name.toLowerCase().search(searchText.toLowerCase());\r\n            if (position !== -1) {\r\n                addFlag = true;\r\n            }\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_10.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_10 = filteredRecordsArray_9;\r\n    }\r\n\r\n    // selectedRecruitmentType (coloring of records) ////////////////\r\n\r\n    filteredRecordsArray_11 = [];\r\n\r\n    let selectedRecruitmentType = [];\r\n\r\n    if (Object.keys(filterConfigData).length !== 0 && filterConfigData.recruitmentType_filter.length) {\r\n        selectedRecruitmentType = filterConfigData.recruitmentType_filter;\r\n        filteredRecordsArray_10.forEach((el) => {\r\n            let addFlag = false;\r\n\r\n            selectedRecruitmentType.forEach((selectedFiltr) => {\r\n                if (el.recruitmentType === selectedFiltr) {\r\n                    addFlag = true;\r\n                }\r\n            });\r\n\r\n            if (addFlag) {\r\n                filteredRecordsArray_11.push(el);\r\n            }\r\n        });\r\n    } else {\r\n        filteredRecordsArray_11 = filteredRecordsArray_10;\r\n    }\r\n\r\n    recordsNumber = filteredRecordsArray_11.length;\r\n\r\n    createRecordBoxes(filteredRecordsArray_11, 0, recordsOnPage);\r\n\r\n    setPages(recordsNumber);\r\n    filtersON = true;\r\n};\r\n\r\nconst pagesContainerStart = () => {\r\n    pagesContainer.classList.add(\"active\");\r\n};\r\n\r\nconst dropDownBtnStart = () => {\r\n    dropDownLoc.addEventListener(\"click\", showHideFilters);\r\n\r\n    dropDownLoc.classList.add(\"active\");\r\n};\r\n\r\n// create HTML FILTERS LISTS //////////////////////////////////////////////////////\r\nconst createFilterLists = (filterConfigData) => {\r\n    if (filterConfigData) {\r\n        if (!filterConfigData.relocation_visible) {\r\n            relocationLoc.classList.add(\"unactive\");\r\n        }\r\n\r\n        if (!filterConfigData.language_visible) {\r\n            languageLoc.classList.add(\"unactive\");\r\n        }\r\n\r\n        if (!filterConfigData.remote_visible) {\r\n            remoteLoc.classList.add(\"unactive\");\r\n        }\r\n\r\n        if (!filterConfigData.location_visible) {\r\n            cityLoc.classList.add(\"unactive\");\r\n            distanceLoc.classList.add(\"unactive\");\r\n        }\r\n\r\n        if (!filterConfigData.branche_visible) {\r\n            sectorLoc.classList.add(\"unactive\");\r\n        }\r\n    }\r\n\r\n    if (filterBranchesList.length > 0) {\r\n        filterBranchesList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n\r\n        filterBranchesList.forEach(function (el) {\r\n            branchesLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<li>\r\n                <div class=\"checkbox-container-small\">\r\n                    <label class=\"checkbox\">\r\n                        <input type=\"checkbox\" id=\"${el}\" name=\"${el}\" value=\"${el}\">\r\n                        <span class=\"checkmark\"></span>\r\n                    </label>\r\n                    <label class=\"label-text\" for=\"${el}\">${el}</label>\r\n                </div>\r\n            </li>`\r\n            );\r\n        });\r\n    }\r\n\r\n    if (filterJobFormList.length > 0) {\r\n        filterJobFormList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n\r\n        filterJobFormList.forEach(function (el) {\r\n            jobFormLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<li>\r\n                <div class=\"checkbox-container-small\">\r\n                    <label class=\"checkbox\">\r\n                        <input type=\"checkbox\" id=\"${el}\" name=\"${el}\" value=\"${el}\">\r\n                        <span class=\"checkmark\"></span>\r\n                    </label>\r\n                    <label class=\"label-text\" for=\"${el}\">${el}</label>\r\n                </div>\r\n            </li>`\r\n            );\r\n        });\r\n    }\r\n\r\n    if (filterJobTypeList.length > 0) {\r\n        filterJobTypeList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n\r\n        filterJobTypeList.forEach(function (el) {\r\n            jobTypeLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<li>\r\n                <div class=\"checkbox-container-small\">\r\n                    <label class=\"checkbox\">\r\n                        <input type=\"checkbox\" id=\"${el}\" name=\"${el}\" value=\"${el}\">\r\n                        <span class=\"checkmark\"></span>\r\n                    </label>\r\n                    <label class=\"label-text\" for=\"${el}\">${el}</label>\r\n                </div>\r\n            </li>`\r\n            );\r\n        });\r\n    }\r\n\r\n    if (filterLangList.length > 0) {\r\n        filterLangList.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n\r\n        filterLangList.forEach(function (el) {\r\n            langLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<li>\r\n                <div class=\"checkbox-container-small\">\r\n                    <label class=\"checkbox\">\r\n                        <input type=\"checkbox\" id=\"${el}\" name=\"${el}\" value=\"${el}\">\r\n                        <span class=\"checkmark\"></span>\r\n                    </label>\r\n                    <label class=\"label-text\" for=\"${el}\">${el}</label>\r\n                </div>\r\n            </li>`\r\n            );\r\n        });\r\n    }\r\n\r\n    if (Object.keys(filterCountriesList).length > 0) {\r\n        function compare(a, b) {\r\n            return a.city.localeCompare(b.city);\r\n        }\r\n\r\n        for (let key in filterCountriesList) {\r\n            filterCountriesList[key].sort(compare);\r\n        }\r\n\r\n        filterCountriesList = Object.keys(filterCountriesList)\r\n            .sort()\r\n            .reduce((accumulator, key) => {\r\n                accumulator[key] = filterCountriesList[key];\r\n                return accumulator;\r\n            }, {});\r\n\r\n        let allCitiesObj = [];\r\n        for (let key in filterCountriesList) {\r\n            allCitiesObj = allCitiesObj.concat(filterCountriesList[key]);\r\n        }\r\n\r\n        let allCitiesArray = [];\r\n        allCitiesObj.forEach((el) => {\r\n            allCitiesArray.push(el.city);\r\n        });\r\n\r\n        allCitiesArray.sort(function (a, b) {\r\n            return a.localeCompare(b);\r\n        });\r\n\r\n        allCitiesArray.forEach(function (el) {\r\n            citiesLoc.insertAdjacentHTML(\r\n                \"beforeend\",\r\n                `<li>\r\n                <div class=\"checkbox-container-small\">\r\n                    <label class=\"checkbox\">\r\n                        <input type=\"checkbox\" id=\"${el}\" name=\"${el}\" value=\"${el}\">\r\n                        <span class=\"checkmark\"></span>\r\n                    </label>\r\n                    <label class=\"label-text\" for=\"${el}\">${el}</label>\r\n                </div>\r\n            </li>`\r\n            );\r\n        });\r\n    }\r\n};\r\n\r\n// PAGES /////////////////////////////////////////////////////////////\r\nconst changePage = (pageBtn) => {\r\n    pageButtonsLoc.forEach((el) => {\r\n        el.classList.remove(\"active\");\r\n    });\r\n    pageBtn.classList.add(\"active\");\r\n    let firstRecord = recordsOnPage * parseInt(pageBtn.innerText) - recordsOnPage;\r\n    let lastRecord = recordsOnPage * parseInt(pageBtn.innerText);\r\n\r\n    filtersON ? createRecordBoxes(filteredRecordsArray_11, firstRecord, lastRecord) : createRecordBoxes(allRecordsArray, firstRecord, lastRecord);\r\n    globActivePageNo = parseInt(pageBtn.innerText);\r\n};\r\n\r\nlet globActivePageNo;\r\n\r\nconst movePrevPagesBtns = () => {\r\n    let firstDispalyedPageNo = parseInt(Array.from(document.querySelectorAll(\".page\")).shift().innerText);\r\n    let lastDispalyedPageNo = parseInt(Array.from(document.querySelectorAll(\".page\")).pop().innerText);\r\n\r\n    let activePageNo;\r\n    activePageNo = document.querySelector(\".page.active\");\r\n\r\n    if (activePageNo) {\r\n        activePageNo = parseInt(activePageNo.innerText);\r\n    }\r\n\r\n    if (firstDispalyedPageNo > 1) {\r\n        pagesSwitchLoc.replaceChildren();\r\n\r\n        for (let n = firstDispalyedPageNo - 1; n <= lastDispalyedPageNo - 1; n++) {\r\n            if (!activePageNo) {\r\n                activePageNo = globActivePageNo;\r\n            }\r\n            if (activePageNo && n === activePageNo) {\r\n                pagesSwitchLoc.insertAdjacentHTML(\"beforeend\", `<div class=\"page active\">${n}</div>`);\r\n            } else {\r\n                pagesSwitchLoc.insertAdjacentHTML(\"beforeend\", `<div class=\"page\">${n}</div>`);\r\n            }\r\n        }\r\n\r\n        if (lastDispalyedPageNo < pagesQuantityCalc + 1) {\r\n            pagesSwitchLoc.insertAdjacentHTML(\"beforeend\", `<div class=\"next active\"><img src=\"./img/chevron-right.svg\" alt=\"\" /></div>`);\r\n            let nextBtnLoc = document.querySelector(\".next\");\r\n            nextBtnLoc.addEventListener(\"click\", () => {\r\n                moveNextPagesBtns();\r\n            });\r\n        } else {\r\n            pagesSwitchLoc.insertAdjacentHTML(\"beforeend\", `<div class=\"next\"><img src=\"\" alt=\"\" /></div>`);\r\n        }\r\n\r\n        if (firstDispalyedPageNo > 2) {\r\n            pagesSwitchLoc.insertAdjacentHTML(\"afterbegin\", `<div class=\"prev active\"><img src=\"./img/chevron-left.svg\" alt=\"\" /></div>`);\r\n            let prevBtnLoc = document.querySelector(\".prev\");\r\n            prevBtnLoc.addEventListener(\"click\", () => {\r\n                movePrevPagesBtns();\r\n            });\r\n        } else {\r\n            pagesSwitchLoc.insertAdjacentHTML(\"afterbegin\", `<div class=\"prev\"><img src=\"\" alt=\"\" /></div>`);\r\n        }\r\n\r\n        pageButtonsLoc = document.querySelectorAll(\".page\");\r\n        pageButtonsLoc.forEach((el) => {\r\n            el.addEventListener(\"click\", (e) => {\r\n                changePage(e.target);\r\n            });\r\n        });\r\n    }\r\n};\r\n\r\nconst moveNextPagesBtns = () => {\r\n    let firstDispalyedPageNo = parseInt(Array.from(document.querySelectorAll(\".page\")).shift().innerText);\r\n    let lastDispalyedPageNo = parseInt(Array.from(document.querySelectorAll(\".page\")).pop().innerText);\r\n\r\n    let activePageNo;\r\n    activePageNo = document.querySelector(\".page.active\");\r\n    if (activePageNo) {\r\n        activePageNo = parseInt(activePageNo.innerText);\r\n        globActivePageNo = activePageNo;\r\n    }\r\n\r\n    if (lastDispalyedPageNo < pagesQuantityCalc) {\r\n        pagesSwitchLoc.replaceChildren();\r\n\r\n        for (let n = firstDispalyedPageNo + 1; n <= lastDispalyedPageNo + 1; n++) {\r\n            if (!activePageNo) {\r\n                activePageNo = globActivePageNo;\r\n            }\r\n            if (activePageNo && n === activePageNo) {\r\n                pagesSwitchLoc.insertAdjacentHTML(\"beforeend\", `<div class=\"page active\">${n}</div>`);\r\n            } else {\r\n                pagesSwitchLoc.insertAdjacentHTML(\"beforeend\", `<div class=\"page\">${n}</div>`);\r\n            }\r\n        }\r\n\r\n        if (lastDispalyedPageNo < pagesQuantityCalc - 1) {\r\n            pagesSwitchLoc.insertAdjacentHTML(\"beforeend\", `<div class=\"next active\"><img src=\"./img/chevron-right.svg\" alt=\"\" /></div>`);\r\n            let nextBtnLoc = document.querySelector(\".next\");\r\n            nextBtnLoc.addEventListener(\"click\", () => {\r\n                moveNextPagesBtns();\r\n            });\r\n        } else {\r\n            pagesSwitchLoc.insertAdjacentHTML(\"beforeend\", `<div class=\"next\"><img src=\"\" alt=\"\" /></div>`);\r\n        }\r\n\r\n        if (firstDispalyedPageNo > 0) {\r\n            pagesSwitchLoc.insertAdjacentHTML(\"afterbegin\", `<div class=\"prev active\"><img src=\"./img/chevron-left.svg\" alt=\"\" /></div>`);\r\n            let prevBtnLoc = document.querySelector(\".prev\");\r\n            prevBtnLoc.addEventListener(\"click\", () => {\r\n                movePrevPagesBtns();\r\n            });\r\n        } else {\r\n            pagesSwitchLoc.insertAdjacentHTML(\"afterbegin\", `<div class=\"prev\"><img src=\"\" alt=\"\" /></div>`);\r\n        }\r\n\r\n        pageButtonsLoc = document.querySelectorAll(\".page\");\r\n        pageButtonsLoc.forEach((el) => {\r\n            el.addEventListener(\"click\", (e) => {\r\n                changePage(e.target);\r\n            });\r\n        });\r\n    }\r\n};\r\n\r\n// RWD /////////////////////////////////////////////////////////////\r\nfunction getWidth() {\r\n    return Math.max(document.body.scrollWidth, document.documentElement.scrollWidth, document.body.offsetWidth, document.documentElement.offsetWidth, document.documentElement.clientWidth);\r\n}\r\n\r\nfunction getHeight() {\r\n    return Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.documentElement.clientHeight);\r\n}\r\n\r\nlet pagesQuantityCalc;\r\n\r\nconst setPages = (recordsNumber) => {\r\n    pagesQuantityCalc = Math.ceil(recordsNumber / recordsOnPage);\r\n\r\n    if (pagesQuantityCalc > maxPageBtns) {\r\n        pagesSwitchLoc.replaceChildren();\r\n\r\n        for (let n = 1; n <= maxPageBtns; n++) {\r\n            if (n === 1) {\r\n                pagesSwitchLoc.insertAdjacentHTML(\"beforeend\", `<div class=\"page active\">${n}</div>`);\r\n            } else {\r\n                pagesSwitchLoc.insertAdjacentHTML(\"beforeend\", `<div class=\"page\">${n}</div>`);\r\n            }\r\n        }\r\n        pagesSwitchLoc.insertAdjacentHTML(\"beforeend\", `<div class=\"next active\"><img src=\"./img/chevron-right.svg\" alt=\"\" /></div>`);\r\n        let nextBtnLoc = document.querySelector(\".next\");\r\n        nextBtnLoc.addEventListener(\"click\", () => {\r\n            moveNextPagesBtns();\r\n        });\r\n    } else {\r\n        pagesSwitchLoc.replaceChildren();\r\n\r\n        for (let n = 1; n <= pagesQuantityCalc; n++) {\r\n            if (n === 1) {\r\n                pagesSwitchLoc.insertAdjacentHTML(\"beforeend\", `<div class=\"page active\">${n}</div>`);\r\n            } else {\r\n                pagesSwitchLoc.insertAdjacentHTML(\"beforeend\", `<div class=\"page\">${n}</div>`);\r\n            }\r\n        }\r\n\r\n        pagesSwitchLoc.insertAdjacentHTML(\"beforeend\", `<div class=\"next\"><img src=\"\" alt=\"\" /></div>`);\r\n    }\r\n\r\n    pagesSwitchLoc.insertAdjacentHTML(\"afterbegin\", `<div class=\"prev\"><img src=\"\" alt=\"\" /></div>`);\r\n\r\n    pageButtonsLoc = document.querySelectorAll(\".page\");\r\n    pageButtonsLoc.forEach((el) => {\r\n        el.addEventListener(\"click\", (e) => {\r\n            changePage(e.target);\r\n        });\r\n    });\r\n};\r\n\r\nlet maxPageBtns;\r\n\r\nconst setPagesBtnQuantity = () => {\r\n    if (getWidth() < 500) {\r\n        maxPageBtns = 3;\r\n    }\r\n    if (getWidth() >= 500 && getWidth() < 650) {\r\n        maxPageBtns = 3;\r\n    }\r\n    if (getWidth() >= 650 && getWidth() < 750) {\r\n        maxPageBtns = 4;\r\n    }\r\n    if (getWidth() >= 750 && getWidth() < 950) {\r\n        maxPageBtns = 7;\r\n    }\r\n    if (getWidth() >= 950 && getWidth() < 1200) {\r\n        maxPageBtns = 12;\r\n    }\r\n    if (getWidth() >= 1200) {\r\n        maxPageBtns = 15;\r\n    }\r\n\r\n    setPages(recordsNumber);\r\n};\r\n\r\nwindow.addEventListener(\"resize\", () => {\r\n    setPagesBtnQuantity();\r\n});\r\n\r\nsetPagesBtnQuantity();\r\n\r\nconst filterAwarded = (configFilterArray, awardedRecordsArray, property) => {\r\n    for (let i = awardedRecordsArray.length - 1; i >= 0; i--) {\r\n        let findFlag = false;\r\n        configFilterArray.forEach((element) => {\r\n            if (awardedRecordsArray[i][property] === element) {\r\n                findFlag = true;\r\n            }\r\n        });\r\n\r\n        if (!findFlag) {\r\n            awardedRecordsArray.splice(i, 1);\r\n        }\r\n    }\r\n};\r\n\r\n// create AWARDED RECORDS BOXES ///////////////////////////////////////////////\r\nconst createAwardedRecordBoxes = (recordsArray, filterConfigData) => {\r\n    awardedResultsLoc.replaceChildren();\r\n\r\n    let awardedRecordsArray = recordsArray.filter((elem) => {\r\n        return elem.awarded;\r\n    });\r\n\r\n    if (awardedRecordsArray.length > 0) {\r\n        if (filterConfigData) {\r\n            if (filterConfigData.remote_filter) {\r\n                awardedRecordsArray = awardedRecordsArray.filter((elem) => {\r\n                    return elem.remote;\r\n                });\r\n            }\r\n\r\n            if (filterConfigData.language_filter.length > 0) {\r\n                filterAwarded(filterConfigData.language_filter, awardedRecordsArray, \"lang\");\r\n            }\r\n\r\n            if (filterConfigData.branche_filter.length > 0) {\r\n                filterAwarded(filterConfigData.branche_filter, awardedRecordsArray, \"branche\");\r\n            }\r\n\r\n            if (filterConfigData.location_country_filter.length > 0) {\r\n                filterAwarded(filterConfigData.location_country_filter, awardedRecordsArray, \"country\");\r\n            }\r\n\r\n            if (filterConfigData.location_city_filter.length > 0) {\r\n                filterAwarded(filterConfigData.location_city_filter, awardedRecordsArray, \"city\");\r\n            }\r\n\r\n            if (filterConfigData.recruitmentType_filter.length > 0) {\r\n                filterAwarded(filterConfigData.recruitmentType_filter, awardedRecordsArray, \"recruitmentType\");\r\n            }\r\n        }\r\n\r\n        for (let i = firstRecordNumber; i < 10; i++) {\r\n            if (awardedRecordsArray[i]) {\r\n                let borderColorClass = \"\";\r\n                let textColorClass = \"\";\r\n\r\n                if (awardedRecordsArray[i].recruitmentType === \"PT\") {\r\n                    borderColorClass = \"pt-border\";\r\n                    textColorClass = \"pt-text\";\r\n                }\r\n                if (awardedRecordsArray[i].recruitmentType === \"RS\") {\r\n                    borderColorClass = \"rs-border\";\r\n                    textColorClass = \"rs-text\";\r\n                }\r\n                if (awardedRecordsArray[i].recruitmentType === \"WEW\") {\r\n                    borderColorClass = \"wew-border\";\r\n                    textColorClass = \"wew-text\";\r\n                }\r\n\r\n                let formaZatrudnienia = \"\";\r\n\r\n                if (awardedRecordsArray[i].jobForm) {\r\n                    awardedRecordsArray[i].jobForm.forEach(function (elem) {\r\n                        formaZatrudnienia = formaZatrudnienia + \"<p>\" + elem + \"</p>\";\r\n                    });\r\n                }\r\n\r\n                awardedResultsLoc.insertAdjacentHTML(\r\n                    \"beforeend\",\r\n                    `<a href=\"${awardedRecordsArray[i].url}\" target=\"_blank\"><div class=\"result ${borderColorClass}\">\r\n                <div class=\"top\">\r\n                \r\n                        <div class=\"lang\">\r\n                            <p>${awardedRecordsArray[i].lang}</p>\r\n                        </div>\r\n                        <div class=\"branche-name\">\r\n                            <div class=\"branche\">${awardedRecordsArray[i].branche ? awardedRecordsArray[i].branche : \"\"}</div>\r\n                            <div class=\"name ${textColorClass}\">${awardedRecordsArray[i].name}</div>\r\n                        </div>\r\n                    \r\n                </div>\r\n\r\n                <div class=\"bottom\">\r\n                    <div class=\"city-container\">\r\n                        <div class=\"city\"><img src=\"./img/location_dot.svg\">${awardedRecordsArray[i].city}</div></div>\r\n                        <div class=\"details-container\">\r\n                        ${awardedRecordsArray[i].remote ? \"<div class='remote'>zdalna</div>\" : \"\"}\r\n                        ${awardedRecordsArray[i].relocation ? \"<div class='relocation'>relocation</div>\" : \"\"}\r\n                        ${awardedRecordsArray[i].jobType ? \"<div class='jobtype'>\" + awardedRecordsArray[i].jobType + \"</div>\" : \"\"}\r\n                        ${awardedRecordsArray[i].visibleRate ? (awardedRecordsArray[i].salaryFrom && awardedRecordsArray[i].salaryTo ? \"<div class='salary'>\" + awardedRecordsArray[i].salaryFrom + \" - \" + awardedRecordsArray[i].salaryTo + \"</div>\" : \"\") : \"\"}\r\n                        <div class=\"employmentform\">${formaZatrudnienia}</div>\r\n                        </div>\r\n                    \r\n                </div>\r\n\r\n                <div class=\"ribbon-wrap\">\r\n                        <div class=\"ribbon\">\r\n                                <img src=\"./img/star.svg\" alt=\"\">\r\n                                <img src=\"./img/star.svg\" alt=\"\">\r\n                                <img src=\"./img/star.svg\" alt=\"\">\r\n                            </div>\r\n                        </div>\r\n                </div>\r\n\r\n            </div></a>`\r\n                );\r\n            }\r\n        }\r\n    } else {\r\n        awardedResultsLoc.style.margin = \"0\";\r\n    }\r\n};\r\n\r\n// show RECORDS NUMBER ///////////////////////////////////////////////\r\nconst summariseDownload = (recordsNumber) => {\r\n    recNumLoc.innerText = `Znaleziono ${recordsNumber} ogłoszeń`;\r\n    if (!recordsNumber) {\r\n        noResultsLoc.classList.add(\"active\");\r\n    } else {\r\n        noResultsLoc.classList.remove(\"active\");\r\n    }\r\n};\r\n\r\n// create FILTER DATA from API data ///////////////////////////////////////////////\r\nconst createDataForFilters = (branche, jobForm, jobType, lang, visibleRate, salaryFrom, salaryTo, country, city, lati, longi) => {\r\n    // BranchesList\r\n\r\n    if (filterBranchesList.indexOf(branche) === -1 && branche !== undefined) {\r\n        if (Object.keys(filterConfigData).length !== 0 && filterConfigData.branche_filter.length) {\r\n            if (filterConfigData.branche_filter.indexOf(branche) !== -1) {\r\n                filterBranchesList.push(branche);\r\n            }\r\n        } else {\r\n            filterBranchesList.push(branche);\r\n        }\r\n    }\r\n\r\n    // JobFormList\r\n\r\n    if (jobForm) {\r\n        jobForm.forEach((elem) => {\r\n            if (filterJobFormList.indexOf(elem) === -1) {\r\n                filterJobFormList.push(elem);\r\n            }\r\n        });\r\n    }\r\n\r\n    // JobTypeList\r\n\r\n    if (filterJobTypeList.indexOf(jobType) === -1 && jobType !== undefined) {\r\n        filterJobTypeList.push(jobType);\r\n    }\r\n\r\n    // LangList\r\n\r\n    if (filterLangList.indexOf(lang) === -1) {\r\n        if (Object.keys(filterConfigData).length !== 0) {\r\n            if (filterConfigData.language_filter.length) {\r\n                if (filterConfigData.language_filter.indexOf(lang) !== -1) {\r\n                    filterLangList.push(lang);\r\n                }\r\n            } else {\r\n                filterLangList.push(lang);\r\n            }\r\n        } else {\r\n            filterLangList.push(lang);\r\n        }\r\n    }\r\n\r\n    // CountriesList\r\n\r\n    if (Object.keys(filterConfigData).length !== 0) {\r\n        if (!filterCountriesList[country]) {\r\n            filterCountriesList[country] = [];\r\n        }\r\n        if (filterConfigData.location_city_filter.length) {\r\n            if (filterConfigData.location_city_filter.indexOf(city) !== -1) {\r\n                filterCountriesList[country].push({\r\n                    city: city,\r\n                    lati: lati,\r\n                    longi: longi,\r\n                });\r\n            }\r\n        } else if (filterConfigData.location_country_filter.length) {\r\n            if (filterConfigData.location_country_filter.indexOf(country) !== -1) {\r\n                filterCountriesList[country].push({\r\n                    city: city,\r\n                    lati: lati,\r\n                    longi: longi,\r\n                });\r\n            }\r\n        } else {\r\n            if (filterCountriesList[country].findIndex((arr_el) => arr_el.city === city) === -1) {\r\n                filterCountriesList[country].push({\r\n                    city: city,\r\n                    lati: lati,\r\n                    longi: longi,\r\n                });\r\n            }\r\n        }\r\n    } else {\r\n        if (!filterCountriesList[country]) {\r\n            filterCountriesList[country] = [];\r\n        }\r\n        if (filterCountriesList[country].findIndex((arr_el) => arr_el.city === city) === -1) {\r\n            filterCountriesList[country].push({\r\n                city: city,\r\n                lati: lati,\r\n                longi: longi,\r\n            });\r\n        }\r\n    }\r\n};\r\n\r\n// create OBJECTS ARRAY from Raw API JSON ///////////////////////////////////////////////\r\nconst reworkData = (rawAPIArray) => {\r\n    rawAPIArray.forEach((el) => {\r\n        let parsedJobLocation;\r\n        if (el.options.job_location) {\r\n            parsedJobLocation = JSON.parse(el.options.job_location);\r\n        }\r\n\r\n        allRecordsArray.push({\r\n            url: el.url,\r\n            name: el.advert.name,\r\n            branche: el.options.branches,\r\n            lang: el.advert.language,\r\n            jobType: el.options.job_type,\r\n            visibleRate: parseInt(el.options._Widoczna_stawka),\r\n            salaryFrom: parseInt(el.options._spodziewane_wynagrodzenie_od),\r\n            salaryTo: parseInt(el.options._spodziewane_wynagrodzenie_do),\r\n            remote: el.options.remote,\r\n            relocation: el.options._relokacja,\r\n            recruitmentType: el.options._rekrutacja_rodzaj,\r\n            jobForm: el.options._forma_zatrudnienia,\r\n            country: parsedJobLocation.country,\r\n            city: parsedJobLocation.locality,\r\n            lati: parseFloat(parsedJobLocation.latitude),\r\n            longi: parseFloat(parsedJobLocation.longitude),\r\n            description: el.advert.values,\r\n            awarded: el.awarded,\r\n        });\r\n\r\n        createDataForFilters(el.options.branches, el.options._forma_zatrudnienia, el.options.job_type, el.advert.language, parseInt(el.options._Widoczna_stawka), parseInt(el.options._spodziewane_wynagrodzenie_od), parseInt(el.options._spodziewane_wynagrodzenie_do), parsedJobLocation.country, parsedJobLocation.locality, parseFloat(parsedJobLocation.latitude), parseFloat(parsedJobLocation.longitude));\r\n    });\r\n};\r\n\r\n// gets DATA FROM API ///////////////////////////////////////////////\r\nconst getAPI = (apiPage) => {\r\n    const response = fetch(\"https://grupaprogres.traffit.com/public/job_posts/published\", {\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"X-Request-Page-Size\": \"100\",\r\n            \"X-Request-Current-Page\": apiPage,\r\n            \"X-Request-Sort\": '{\"sort_by\": \"id\", \"direction\": \"ASC\"}',\r\n        },\r\n    });\r\n\r\n    return response;\r\n};\r\n\r\n// gets DATA FROM API 2 ///////////////////////////////////////////////\r\nconst getAPI_2 = (apiPage) => {\r\n    const response = fetch(\"https://rsgrupaprogres.traffit.com/public/job_posts/published\", {\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"X-Request-Page-Size\": \"100\",\r\n            \"X-Request-Current-Page\": apiPage,\r\n            \"X-Request-Sort\": '{\"sort_by\": \"id\", \"direction\": \"ASC\"}',\r\n        },\r\n    });\r\n\r\n    return response;\r\n};\r\n\r\nconst loopOnAPI = (jsonData, filterConfigData) => {\r\n    if (jsonData.length > 0 && apiNumber === 1) {\r\n        rawAPIArray = rawAPIArray.concat(jsonData);\r\n        apiPage++;\r\n        createRecordsObjFromAPI(apiPage, filterConfigData);\r\n    } else if (jsonData.length === 0 && apiNumber === 1) {\r\n        apiPage = 1;\r\n        createRecordsObjFromAPI_2(apiPage, filterConfigData);\r\n    } else if (jsonData.length > 0 && apiNumber === 2) {\r\n        rawAPIArray = rawAPIArray.concat(jsonData);\r\n        apiPage++;\r\n        createRecordsObjFromAPI_2(apiPage, filterConfigData);\r\n    } else {\r\n        reworkData(rawAPIArray);\r\n        recordsNumber = rawAPIArray.length;\r\n        createAwardedRecordBoxes(allRecordsArray, filterConfigData);\r\n        setPages(recordsNumber);\r\n        createFilterLists(filterConfigData);\r\n        addListenerToFilterListsElements();\r\n        createFilteredRecordsArray();\r\n        distanceInputsLoc.forEach((elem) => {\r\n            elem.checked = false;\r\n        });\r\n        jobInputLoc.value = \"\";\r\n    }\r\n};\r\n\r\nasync function createRecordsObjFromAPI(apiPage, filterConfigData) {\r\n    apiNumber = 1;\r\n    const rawData = await getAPI(apiPage);\r\n    const jsonData = await rawData.json();\r\n    loopOnAPI(jsonData, filterConfigData);\r\n}\r\n\r\nasync function createRecordsObjFromAPI_2(apiPage, filterConfigData) {\r\n    apiNumber = 2;\r\n    const rawData = await getAPI_2(apiPage);\r\n    const jsonData = await rawData.json();\r\n    loopOnAPI(jsonData, filterConfigData);\r\n}\r\n\r\n// consider configuration filters ////////////////////////\r\nconst getConfigFilter = () => {\r\n    const response = fetch(\"./config/config.json\");\r\n    return response;\r\n};\r\n\r\nasync function readConfigFilter() {\r\n    try {\r\n        const rawData = await getConfigFilter();\r\n        filterConfigData = await rawData.json();\r\n        createRecordsObjFromAPI(apiPage, filterConfigData);\r\n    } catch (e) {\r\n        console.error(e);\r\n        createRecordsObjFromAPI(apiPage);\r\n    }\r\n}\r\n\r\nreadConfigFilter();\r\n\r\n// change RECORDS QUANTITY ON PAGE //////////////////////////////////////////////////\r\nrecordsOnPageLoc.addEventListener(\"change\", (e) => {\r\n    recordsOnPage = parseInt(e.target.value);\r\n\r\n    filtersON ? createRecordBoxes(filteredRecordsArray_11, 0, recordsOnPage) : createRecordBoxes(allRecordsArray, 0, recordsOnPage);\r\n    setPages(recordsNumber);\r\n\r\n    // setParentIframeHeight();\r\n});\r\n\r\n// SEARCH LISTENER /////////////////////////////////////////////////////////////\r\nsearchBtn.addEventListener(\"click\", createFilteredRecordsArray);\r\n\r\nadvancedSearchBar.addEventListener(\"click\", () => {\r\n    advancedContainer.classList.toggle(\"showed\");\r\n    advancedSearchBtn.classList.toggle(\"rotate180\");\r\n});\r\n\r\nconst clearAllFiltersLoc = document.querySelector(\".clear-all-filters\");\r\n\r\nclearAllFiltersLoc.addEventListener(\"click\", () => {\r\n    filterListLocArray.forEach((elem, index) => {\r\n        const clearBtn = elem.querySelector(\".clear-btn\");\r\n        const filtersQuantityBtn = elem.querySelector(\".filters-quantity\");\r\n        const filtersSelectedOptions = elem.querySelector(\".selected-options\");\r\n        const filtersListTitle = elem.querySelector(\".list-title\");\r\n\r\n        selectedOptionsInFilterArray[index] = [];\r\n        clearBtn.style.opacity = \"0\";\r\n        elem.querySelectorAll(\"input\").forEach((el) => {\r\n            el.checked = false;\r\n        });\r\n        filtersSelectedOptions.innerText = \"\";\r\n        filtersListTitle.classList.remove(\"mini\");\r\n        filtersQuantityBtn.style.opacity = \"0\";\r\n    });\r\n\r\n    jobInputLoc.value = \"\";\r\n    jobLabelLoc.classList.remove(\"mini\");\r\n    jobInputLoc.classList.remove(\"active\");\r\n    jobClearBtnLoc.style.opacity = \"0\";\r\n    jobClearBtnLoc.style.display = \"none\";\r\n\r\n    distanceLoc.querySelectorAll(\"input\").forEach((elem) => {\r\n        elem.checked = false;\r\n    });\r\n    distanceListTitleLoc.innerText = \"+0 km\";\r\n    createFilteredRecordsArray();\r\n});\r\n\r\njobInputLoc.addEventListener(\"keypress\", (event) => {\r\n    if (event.key === \"Enter\") {\r\n        event.preventDefault();\r\n        searchBtn.click();\r\n    }\r\n});\r\n\r\njobInputLoc.addEventListener(\"blur\", () => {\r\n    if (jobInputLoc.value !== \"\") {\r\n        searchBtn.click();\r\n    }\r\n});\r\n\r\njobInputLoc.addEventListener(\"input\", () => {\r\n    if (jobInputLoc.value === \"\") {\r\n        searchBtn.click();\r\n    }\r\n});\r\n\r\nremoteInputLoc.addEventListener(\"change\", () => {\r\n    searchBtn.click();\r\n});\r\n\r\nrelocationInputLoc.addEventListener(\"change\", () => {\r\n    searchBtn.click();\r\n});\r\n"]}